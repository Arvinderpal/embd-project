// Code generated by protoc-gen-go. DO NOT EDIT.
// source: segue.proto

package seguepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MessageType int32

const (
	MessageType_UnitTest         MessageType = 0
	MessageType_SensorUltraSonic MessageType = 1
	MessageType_CmdDrive         MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "UnitTest",
	1: "SensorUltraSonic",
	2: "CmdDrive",
}
var MessageType_value = map[string]int32{
	"UnitTest":         0,
	"SensorUltraSonic": 1,
	"CmdDrive":         2,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Message struct {
	ID   *Message_MessageID `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Data []byte             `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Message) GetID() *Message_MessageID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Message_MessageID struct {
	Type    MessageType `protobuf:"varint,1,opt,name=Type,enum=seguepb.MessageType" json:"Type,omitempty"`
	SubType string      `protobuf:"bytes,2,opt,name=SubType" json:"SubType,omitempty"`
	Version uint64      `protobuf:"varint,3,opt,name=Version" json:"Version,omitempty"`
}

func (m *Message_MessageID) Reset()                    { *m = Message_MessageID{} }
func (m *Message_MessageID) String() string            { return proto.CompactTextString(m) }
func (*Message_MessageID) ProtoMessage()               {}
func (*Message_MessageID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *Message_MessageID) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_UnitTest
}

func (m *Message_MessageID) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *Message_MessageID) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type MessageEnvelope struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
}

func (m *MessageEnvelope) Reset()                    { *m = MessageEnvelope{} }
func (m *MessageEnvelope) String() string            { return proto.CompactTextString(m) }
func (*MessageEnvelope) ProtoMessage()               {}
func (*MessageEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *MessageEnvelope) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "seguepb.Message")
	proto.RegisterType((*Message_MessageID)(nil), "seguepb.Message.MessageID")
	proto.RegisterType((*MessageEnvelope)(nil), "seguepb.MessageEnvelope")
	proto.RegisterEnum("seguepb.MessageType", MessageType_name, MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Messenger service

type MessengerClient interface {
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of MessageEnvelope(s) and generates a stream of
	// MessageEnvelope(s).
	// Note that each Envelope can contain many individual messages.
	Messenger(ctx context.Context, opts ...grpc.CallOption) (Messenger_MessengerClient, error)
}

type messengerClient struct {
	cc *grpc.ClientConn
}

func NewMessengerClient(cc *grpc.ClientConn) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) Messenger(ctx context.Context, opts ...grpc.CallOption) (Messenger_MessengerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Messenger_serviceDesc.Streams[0], c.cc, "/seguepb.Messenger/Messenger", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerMessengerClient{stream}
	return x, nil
}

type Messenger_MessengerClient interface {
	Send(*MessageEnvelope) error
	Recv() (*MessageEnvelope, error)
	grpc.ClientStream
}

type messengerMessengerClient struct {
	grpc.ClientStream
}

func (x *messengerMessengerClient) Send(m *MessageEnvelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerMessengerClient) Recv() (*MessageEnvelope, error) {
	m := new(MessageEnvelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Messenger service

type MessengerServer interface {
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of MessageEnvelope(s) and generates a stream of
	// MessageEnvelope(s).
	// Note that each Envelope can contain many individual messages.
	Messenger(Messenger_MessengerServer) error
}

func RegisterMessengerServer(s *grpc.Server, srv MessengerServer) {
	s.RegisterService(&_Messenger_serviceDesc, srv)
}

func _Messenger_Messenger_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Messenger(&messengerMessengerServer{stream})
}

type Messenger_MessengerServer interface {
	Send(*MessageEnvelope) error
	Recv() (*MessageEnvelope, error)
	grpc.ServerStream
}

type messengerMessengerServer struct {
	grpc.ServerStream
}

func (x *messengerMessengerServer) Send(m *MessageEnvelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerMessengerServer) Recv() (*MessageEnvelope, error) {
	m := new(MessageEnvelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Messenger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seguepb.Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Messenger",
			Handler:       _Messenger_Messenger_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "segue.proto",
}

func init() { proto.RegisterFile("segue.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x6a, 0xf3, 0x30,
	0x14, 0x85, 0x23, 0xc7, 0xfc, 0x4e, 0xae, 0xc3, 0x5f, 0x23, 0x32, 0x08, 0x4f, 0xc6, 0x93, 0x08,
	0xc5, 0x14, 0xf7, 0x01, 0x32, 0xd4, 0x19, 0x3c, 0x74, 0x91, 0x93, 0xee, 0x76, 0x7b, 0x31, 0x86,
	0x54, 0x32, 0x92, 0x12, 0xe8, 0x7b, 0xf5, 0x01, 0x8b, 0x55, 0x3b, 0x04, 0x43, 0x27, 0xe9, 0xe8,
	0x7c, 0x9c, 0x7b, 0xc4, 0x85, 0xd0, 0x60, 0x7b, 0xc1, 0xac, 0xd7, 0xca, 0x2a, 0x1a, 0x38, 0xd1,
	0x37, 0xe9, 0x37, 0x81, 0xe0, 0x15, 0x8d, 0xa9, 0x5b, 0xa4, 0x3b, 0xf0, 0xca, 0x82, 0x91, 0x84,
	0xf0, 0x30, 0x8f, 0xb3, 0x91, 0xc8, 0x46, 0x77, 0x3a, 0xcb, 0x42, 0x78, 0x65, 0x41, 0x29, 0xf8,
	0x45, 0x6d, 0x6b, 0xe6, 0x25, 0x84, 0x6f, 0x84, 0xbb, 0xc7, 0x1d, 0xac, 0x6f, 0x10, 0xe5, 0xe0,
	0x1f, 0xbf, 0x7a, 0x74, 0x71, 0xff, 0xf3, 0xed, 0x3c, 0x6e, 0xf0, 0x84, 0x23, 0x28, 0x83, 0xa0,
	0xba, 0x34, 0x0e, 0x1e, 0xd2, 0xd6, 0x62, 0x92, 0x83, 0xf3, 0x86, 0xda, 0x74, 0x4a, 0xb2, 0x65,
	0x42, 0xb8, 0x2f, 0x26, 0x99, 0xee, 0xe1, 0x61, 0x0c, 0x3a, 0xc8, 0x2b, 0x9e, 0x55, 0x8f, 0xf4,
	0x11, 0x56, 0xe3, 0x93, 0x61, 0x24, 0x59, 0xf2, 0x30, 0x8f, 0xe6, 0x43, 0xc5, 0x8d, 0xd8, 0xed,
	0x21, 0xbc, 0x6b, 0x42, 0x37, 0xb0, 0x3a, 0xc9, 0xce, 0x1e, 0xd1, 0xd8, 0x68, 0x41, 0xb7, 0x10,
	0x55, 0x28, 0x8d, 0xd2, 0xa7, 0xb3, 0xd5, 0x75, 0xa5, 0x64, 0xf7, 0x1e, 0x91, 0x81, 0x79, 0xf9,
	0xfc, 0x28, 0x74, 0x77, 0xc5, 0xc8, 0xcb, 0xc5, 0xef, 0x67, 0x51, 0xb6, 0xa8, 0xe9, 0xe1, 0x5e,
	0xb0, 0xf9, 0xd8, 0xa9, 0x62, 0xfc, 0xa7, 0x93, 0x2e, 0x38, 0x79, 0x22, 0xcd, 0x3f, 0xb7, 0x9c,
	0xe7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x31, 0xc0, 0xcb, 0xfd, 0xab, 0x01, 0x00, 0x00,
}
