// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensor_ultrasonic.proto

package seguepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UltraSonicQualifiers int32

const (
	UltraSonicQualifiers_FrontFacing UltraSonicQualifiers = 0
	UltraSonicQualifiers_RearFacing  UltraSonicQualifiers = 1
	UltraSonicQualifiers_LeftFacing  UltraSonicQualifiers = 2
	UltraSonicQualifiers_RightFacing UltraSonicQualifiers = 3
)

var UltraSonicQualifiers_name = map[int32]string{
	0: "FrontFacing",
	1: "RearFacing",
	2: "LeftFacing",
	3: "RightFacing",
}
var UltraSonicQualifiers_value = map[string]int32{
	"FrontFacing": 0,
	"RearFacing":  1,
	"LeftFacing":  2,
	"RightFacing": 3,
}

func (x UltraSonicQualifiers) String() string {
	return proto.EnumName(UltraSonicQualifiers_name, int32(x))
}
func (UltraSonicQualifiers) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type SensorUltraSonicData struct {
	EchoSample int64 `protobuf:"varint,1,opt,name=echoSample" json:"echoSample,omitempty"`
}

func (m *SensorUltraSonicData) Reset()                    { *m = SensorUltraSonicData{} }
func (m *SensorUltraSonicData) String() string            { return proto.CompactTextString(m) }
func (*SensorUltraSonicData) ProtoMessage()               {}
func (*SensorUltraSonicData) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *SensorUltraSonicData) GetEchoSample() int64 {
	if m != nil {
		return m.EchoSample
	}
	return 0
}

func init() {
	proto.RegisterType((*SensorUltraSonicData)(nil), "seguepb.SensorUltraSonicData")
	proto.RegisterEnum("seguepb.UltraSonicQualifiers", UltraSonicQualifiers_name, UltraSonicQualifiers_value)
}

func init() { proto.RegisterFile("sensor_ultrasonic.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x4e, 0xcd, 0x2b,
	0xce, 0x2f, 0x8a, 0x2f, 0xcd, 0x29, 0x29, 0x4a, 0x2c, 0xce, 0xcf, 0xcb, 0x4c, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x4e, 0x4d, 0x2f, 0x4d, 0x2d, 0x48, 0x52, 0x32, 0xe3, 0x12,
	0x09, 0x06, 0xab, 0x09, 0x05, 0x29, 0x09, 0x06, 0x29, 0x71, 0x49, 0x2c, 0x49, 0x14, 0x92, 0xe3,
	0xe2, 0x4a, 0x4d, 0xce, 0xc8, 0x0f, 0x4e, 0xcc, 0x2d, 0xc8, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4,
	0x60, 0x0e, 0x42, 0x12, 0xd1, 0x8a, 0xe0, 0x12, 0x41, 0xe8, 0x08, 0x2c, 0x4d, 0xcc, 0xc9, 0x4c,
	0xcb, 0x4c, 0x2d, 0x2a, 0x16, 0xe2, 0xe7, 0xe2, 0x76, 0x2b, 0xca, 0xcf, 0x2b, 0x71, 0x4b, 0x4c,
	0xce, 0xcc, 0x4b, 0x17, 0x60, 0x10, 0xe2, 0xe3, 0xe2, 0x0a, 0x4a, 0x4d, 0x2c, 0x82, 0xf2, 0x19,
	0x41, 0x7c, 0x9f, 0xd4, 0x34, 0x98, 0x3c, 0x13, 0x48, 0x43, 0x50, 0x66, 0x7a, 0x06, 0x4c, 0x80,
	0x39, 0x89, 0x0d, 0xec, 0x42, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0x67, 0x51, 0xea,
	0xbc, 0x00, 0x00, 0x00,
}
