// Code generated by protoc-gen-gogo.
// source: unittestprog.proto
// DO NOT EDIT!

package matrapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UnitTestProgramData struct {
	DummyUnitTestField int64  `protobuf:"varint,1,opt,name=DummyUnitTestField,proto3" json:"DummyUnitTestField,omitempty"`
	PacketCount        uint64 `protobuf:"varint,2,opt,name=PacketCount,proto3" json:"PacketCount,omitempty"`
	ByteCount          uint64 `protobuf:"varint,3,opt,name=ByteCount,proto3" json:"ByteCount,omitempty"`
}

func (m *UnitTestProgramData) Reset()                    { *m = UnitTestProgramData{} }
func (m *UnitTestProgramData) String() string            { return proto.CompactTextString(m) }
func (*UnitTestProgramData) ProtoMessage()               {}
func (*UnitTestProgramData) Descriptor() ([]byte, []int) { return fileDescriptorUnittestprog, []int{0} }

func (m *UnitTestProgramData) GetDummyUnitTestField() int64 {
	if m != nil {
		return m.DummyUnitTestField
	}
	return 0
}

func (m *UnitTestProgramData) GetPacketCount() uint64 {
	if m != nil {
		return m.PacketCount
	}
	return 0
}

func (m *UnitTestProgramData) GetByteCount() uint64 {
	if m != nil {
		return m.ByteCount
	}
	return 0
}

func init() {
	proto.RegisterType((*UnitTestProgramData)(nil), "matrapb.UnitTestProgramData")
}
func (m *UnitTestProgramData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitTestProgramData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DummyUnitTestField != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUnittestprog(dAtA, i, uint64(m.DummyUnitTestField))
	}
	if m.PacketCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUnittestprog(dAtA, i, uint64(m.PacketCount))
	}
	if m.ByteCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUnittestprog(dAtA, i, uint64(m.ByteCount))
	}
	return i, nil
}

func encodeFixed64Unittestprog(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Unittestprog(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUnittestprog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UnitTestProgramData) Size() (n int) {
	var l int
	_ = l
	if m.DummyUnitTestField != 0 {
		n += 1 + sovUnittestprog(uint64(m.DummyUnitTestField))
	}
	if m.PacketCount != 0 {
		n += 1 + sovUnittestprog(uint64(m.PacketCount))
	}
	if m.ByteCount != 0 {
		n += 1 + sovUnittestprog(uint64(m.ByteCount))
	}
	return n
}

func sovUnittestprog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUnittestprog(x uint64) (n int) {
	return sovUnittestprog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UnitTestProgramData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnittestprog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitTestProgramData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitTestProgramData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DummyUnitTestField", wireType)
			}
			m.DummyUnitTestField = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnittestprog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DummyUnitTestField |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketCount", wireType)
			}
			m.PacketCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnittestprog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteCount", wireType)
			}
			m.ByteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnittestprog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUnittestprog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUnittestprog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUnittestprog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUnittestprog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnittestprog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnittestprog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUnittestprog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUnittestprog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUnittestprog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUnittestprog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUnittestprog   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("unittestprog.proto", fileDescriptorUnittestprog) }

var fileDescriptorUnittestprog = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0xcd, 0xcb, 0x2c,
	0x29, 0x49, 0x2d, 0x2e, 0x29, 0x28, 0xca, 0x4f, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0xcf, 0x4d, 0x2c, 0x29, 0x4a, 0x2c, 0x48, 0x52, 0x6a, 0x65, 0xe4, 0x12, 0x0e, 0xcd, 0xcb, 0x2c,
	0x09, 0x49, 0x2d, 0x2e, 0x09, 0x28, 0xca, 0x4f, 0x2f, 0x4a, 0xcc, 0x75, 0x49, 0x2c, 0x49, 0x14,
	0xd2, 0xe3, 0x12, 0x72, 0x29, 0xcd, 0xcd, 0xad, 0x84, 0xc9, 0xb9, 0x65, 0xa6, 0xe6, 0xa4, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x61, 0x91, 0x11, 0x52, 0xe0, 0xe2, 0x0e, 0x48, 0x4c, 0xce,
	0x4e, 0x2d, 0x71, 0xce, 0x2f, 0xcd, 0x2b, 0x91, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x09, 0x42, 0x16,
	0x12, 0x92, 0xe1, 0xe2, 0x74, 0xaa, 0x2c, 0x49, 0x85, 0xc8, 0x33, 0x83, 0xe5, 0x11, 0x02, 0x4e,
	0x02, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7,
	0x72, 0x0c, 0x49, 0x6c, 0x60, 0x97, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x46, 0x52, 0xff,
	0x4a, 0xbf, 0x00, 0x00, 0x00,
}
