// Code generated by protoc-gen-gogo.
// source: sampleprog.proto
// DO NOT EDIT!

package matrapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SampleProgramData struct {
	PacketCount   uint64 `protobuf:"varint,1,opt,name=PacketCount,proto3" json:"PacketCount,omitempty"`
	ByteCount     uint64 `protobuf:"varint,2,opt,name=ByteCount,proto3" json:"ByteCount,omitempty"`
	Count100Bytes uint64 `protobuf:"varint,3,opt,name=Count100Bytes,proto3" json:"Count100Bytes,omitempty"`
}

func (m *SampleProgramData) Reset()                    { *m = SampleProgramData{} }
func (m *SampleProgramData) String() string            { return proto.CompactTextString(m) }
func (*SampleProgramData) ProtoMessage()               {}
func (*SampleProgramData) Descriptor() ([]byte, []int) { return fileDescriptorSampleprog, []int{0} }

func (m *SampleProgramData) GetPacketCount() uint64 {
	if m != nil {
		return m.PacketCount
	}
	return 0
}

func (m *SampleProgramData) GetByteCount() uint64 {
	if m != nil {
		return m.ByteCount
	}
	return 0
}

func (m *SampleProgramData) GetCount100Bytes() uint64 {
	if m != nil {
		return m.Count100Bytes
	}
	return 0
}

func init() {
	proto.RegisterType((*SampleProgramData)(nil), "matrapb.SampleProgramData")
}
func (m *SampleProgramData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SampleProgramData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PacketCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSampleprog(dAtA, i, uint64(m.PacketCount))
	}
	if m.ByteCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSampleprog(dAtA, i, uint64(m.ByteCount))
	}
	if m.Count100Bytes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSampleprog(dAtA, i, uint64(m.Count100Bytes))
	}
	return i, nil
}

func encodeFixed64Sampleprog(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Sampleprog(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSampleprog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SampleProgramData) Size() (n int) {
	var l int
	_ = l
	if m.PacketCount != 0 {
		n += 1 + sovSampleprog(uint64(m.PacketCount))
	}
	if m.ByteCount != 0 {
		n += 1 + sovSampleprog(uint64(m.ByteCount))
	}
	if m.Count100Bytes != 0 {
		n += 1 + sovSampleprog(uint64(m.Count100Bytes))
	}
	return n
}

func sovSampleprog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSampleprog(x uint64) (n int) {
	return sovSampleprog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SampleProgramData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSampleprog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SampleProgramData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SampleProgramData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketCount", wireType)
			}
			m.PacketCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSampleprog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteCount", wireType)
			}
			m.ByteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSampleprog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count100Bytes", wireType)
			}
			m.Count100Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSampleprog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count100Bytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSampleprog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSampleprog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSampleprog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSampleprog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSampleprog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSampleprog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSampleprog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSampleprog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSampleprog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSampleprog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSampleprog   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sampleprog.proto", fileDescriptorSampleprog) }

var fileDescriptorSampleprog = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x4e, 0xcc, 0x2d,
	0xc8, 0x49, 0x2d, 0x28, 0xca, 0x4f, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0x4d,
	0x2c, 0x29, 0x4a, 0x2c, 0x48, 0x52, 0xaa, 0xe4, 0x12, 0x0c, 0x06, 0x4b, 0x06, 0x14, 0xe5, 0xa7,
	0x17, 0x25, 0xe6, 0xba, 0x24, 0x96, 0x24, 0x0a, 0x29, 0x70, 0x71, 0x07, 0x24, 0x26, 0x67, 0xa7,
	0x96, 0x38, 0xe7, 0x97, 0xe6, 0x95, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x21, 0x0b, 0x09,
	0xc9, 0x70, 0x71, 0x3a, 0x55, 0x96, 0xa4, 0x42, 0xe4, 0x99, 0xc0, 0xf2, 0x08, 0x01, 0x21, 0x15,
	0x2e, 0x5e, 0x30, 0xc3, 0xd0, 0xc0, 0x00, 0x24, 0x58, 0x2c, 0xc1, 0x0c, 0x56, 0x81, 0x2a, 0xe8,
	0x24, 0x70, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78,
	0x2c, 0xc7, 0x90, 0xc4, 0x06, 0x76, 0x9c, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x2e, 0x29,
	0x40, 0xb0, 0x00, 0x00, 0x00,
}
