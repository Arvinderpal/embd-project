// Code generated by protoc-gen-gogo.
// source: dnsfilterprog.proto
// DO NOT EDIT!

/*
Package matrapb is a generated protocol buffer package.

It is generated from these files:
	dnsfilterprog.proto
	matra.proto
	sampleprog.proto
	unittestprog.proto

It has these top-level messages:
	DNSFilterProgramData
	Entry
	Message
	SampleProgramData
	UnitTestProgramData
*/
package matrapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DNSFilterProgramData struct {
	BlockedRequestsCount map[string]int64 `protobuf:"bytes,1,rep,name=BlockedRequestsCount" json:"BlockedRequestsCount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *DNSFilterProgramData) Reset()         { *m = DNSFilterProgramData{} }
func (m *DNSFilterProgramData) String() string { return proto.CompactTextString(m) }
func (*DNSFilterProgramData) ProtoMessage()    {}
func (*DNSFilterProgramData) Descriptor() ([]byte, []int) {
	return fileDescriptorDnsfilterprog, []int{0}
}

func (m *DNSFilterProgramData) GetBlockedRequestsCount() map[string]int64 {
	if m != nil {
		return m.BlockedRequestsCount
	}
	return nil
}

func init() {
	proto.RegisterType((*DNSFilterProgramData)(nil), "matrapb.DNSFilterProgramData")
}
func (m *DNSFilterProgramData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSFilterProgramData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockedRequestsCount) > 0 {
		for k, _ := range m.BlockedRequestsCount {
			dAtA[i] = 0xa
			i++
			v := m.BlockedRequestsCount[k]
			mapSize := 1 + len(k) + sovDnsfilterprog(uint64(len(k))) + 1 + sovDnsfilterprog(uint64(v))
			i = encodeVarintDnsfilterprog(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDnsfilterprog(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintDnsfilterprog(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func encodeFixed64Dnsfilterprog(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dnsfilterprog(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDnsfilterprog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DNSFilterProgramData) Size() (n int) {
	var l int
	_ = l
	if len(m.BlockedRequestsCount) > 0 {
		for k, v := range m.BlockedRequestsCount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDnsfilterprog(uint64(len(k))) + 1 + sovDnsfilterprog(uint64(v))
			n += mapEntrySize + 1 + sovDnsfilterprog(uint64(mapEntrySize))
		}
	}
	return n
}

func sovDnsfilterprog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDnsfilterprog(x uint64) (n int) {
	return sovDnsfilterprog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DNSFilterProgramData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDnsfilterprog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSFilterProgramData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSFilterProgramData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedRequestsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnsfilterprog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDnsfilterprog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnsfilterprog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnsfilterprog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDnsfilterprog
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.BlockedRequestsCount == nil {
				m.BlockedRequestsCount = make(map[string]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDnsfilterprog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDnsfilterprog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlockedRequestsCount[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.BlockedRequestsCount[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDnsfilterprog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDnsfilterprog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDnsfilterprog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDnsfilterprog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDnsfilterprog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDnsfilterprog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDnsfilterprog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDnsfilterprog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDnsfilterprog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDnsfilterprog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDnsfilterprog   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dnsfilterprog.proto", fileDescriptorDnsfilterprog) }

var fileDescriptorDnsfilterprog = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0xc9, 0x2b, 0x4e,
	0xcb, 0xcc, 0x29, 0x49, 0x2d, 0x2a, 0x28, 0xca, 0x4f, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0xcf, 0x4d, 0x2c, 0x29, 0x4a, 0x2c, 0x48, 0x52, 0x3a, 0xc3, 0xc8, 0x25, 0xe2, 0xe2, 0x17,
	0xec, 0x06, 0x56, 0x10, 0x50, 0x94, 0x9f, 0x5e, 0x94, 0x98, 0xeb, 0x92, 0x58, 0x92, 0x28, 0x94,
	0xcd, 0x25, 0xe2, 0x94, 0x93, 0x9f, 0x9c, 0x9d, 0x9a, 0x12, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c,
	0x52, 0xec, 0x9c, 0x5f, 0x9a, 0x57, 0x22, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0x64, 0xae, 0x07,
	0x35, 0x40, 0x0f, 0x9b, 0x66, 0x3d, 0x6c, 0x3a, 0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0xb0, 0x1a,
	0x2a, 0xe5, 0xce, 0x25, 0x89, 0x53, 0x8b, 0x90, 0x00, 0x17, 0x73, 0x76, 0x6a, 0xa5, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x67, 0x10, 0x88, 0x29, 0x24, 0xc2, 0xc5, 0x5a, 0x96, 0x98, 0x53, 0x9a, 0x2a,
	0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x1c, 0x04, 0xe1, 0x58, 0x31, 0x59, 0x30, 0x3a, 0x09, 0x9c, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24,
	0xb1, 0x81, 0x3d, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xac, 0xa1, 0xf0, 0x07, 0x01,
	0x00, 0x00,
}
