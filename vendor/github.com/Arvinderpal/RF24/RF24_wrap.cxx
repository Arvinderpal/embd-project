/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: RF24.i

#define SWIGMODULE RF24

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "RF24.h"
#include "RF24_config.h"
#include "nRF24L01.h"
//#include "utility/includes.h"
//#include "utility/RPi/bcm2835.h" 
//#include "utility/RPi/RF24_arch_config.h"
//#include "utility/RPi/interrupt.h"


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_RF24_25da4ded0286b3c1(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_RF24_25da4ded0286b3c1(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_0_RF24_25da4ded0286b3c1() {
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_1_RF24_25da4ded0286b3c1(long long _swig_go_0) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


long long _wrap_StringVector_size_RF24_25da4ded0286b3c1(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_StringVector_capacity_RF24_25da4ded0286b3c1(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_StringVector_reserve_RF24_25da4ded0286b3c1(std::vector< std::string > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_StringVector_isEmpty_RF24_25da4ded0286b3c1(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_StringVector_clear_RF24_25da4ded0286b3c1(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_StringVector_add_RF24_25da4ded0286b3c1(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  std::vector< std::string >::value_type arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  
}


_gostring_ _wrap_StringVector_get_RF24_25da4ded0286b3c1(std::vector< std::string > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_StringVector_set_RF24_25da4ded0286b3c1(std::vector< std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::vector< std::string >::value_type arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  
}


void _wrap_delete_StringVector_RF24_25da4ded0286b3c1(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< char > *_wrap_new_ByteVector__SWIG_0_RF24_25da4ded0286b3c1() {
  std::vector< char > *result = 0 ;
  std::vector< char > *_swig_go_result;
  
  
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&_swig_go_result = (std::vector< char > *)result; 
  return _swig_go_result;
}


std::vector< char > *_wrap_new_ByteVector__SWIG_1_RF24_25da4ded0286b3c1(long long _swig_go_0) {
  std::vector< char >::size_type arg1 ;
  std::vector< char > *result = 0 ;
  std::vector< char > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< char > *)new std::vector< char >(arg1);
  *(std::vector< char > **)&_swig_go_result = (std::vector< char > *)result; 
  return _swig_go_result;
}


long long _wrap_ByteVector_size_RF24_25da4ded0286b3c1(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  result = ((std::vector< char > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ByteVector_capacity_RF24_25da4ded0286b3c1(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  result = ((std::vector< char > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ByteVector_reserve_RF24_25da4ded0286b3c1(std::vector< char > *_swig_go_0, long long _swig_go_1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_ByteVector_isEmpty_RF24_25da4ded0286b3c1(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  result = (bool)((std::vector< char > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ByteVector_clear_RF24_25da4ded0286b3c1(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_ByteVector_add_RF24_25da4ded0286b3c1(std::vector< char > *_swig_go_0, char _swig_go_1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (std::vector< char >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
  
}


char _wrap_ByteVector_get_RF24_25da4ded0286b3c1(std::vector< char > *_swig_go_0, intgo _swig_go_1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  char _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  _swig_go_result = (char)*result; 
  return _swig_go_result;
}


void _wrap_ByteVector_set_RF24_25da4ded0286b3c1(std::vector< char > *_swig_go_0, intgo _swig_go_1, char _swig_go_2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< char >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  
}


void _wrap_delete_ByteVector_RF24_25da4ded0286b3c1(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_RF24_PA_MIN_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_PA_MIN;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_PA_LOW_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_PA_LOW;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_PA_HIGH_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_PA_HIGH;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_PA_MAX_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_PA_MAX;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_PA_ERROR_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_PA_ERROR;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_1MBPS_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_1MBPS;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_2MBPS_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_2MBPS;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_250KBPS_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_250KBPS;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_CRC_DISABLED_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_CRC_DISABLED;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_CRC_8_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_CRC_8;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_CRC_16_RF24_25da4ded0286b3c1() {
  int result;
  intgo _swig_go_result;
  
  
  result = RF24_CRC_16;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


RF24 *_wrap_new_RF24__SWIG_0_RF24_25da4ded0286b3c1(short _swig_go_0, short _swig_go_1) {
  uint16_t arg1 ;
  uint16_t arg2 ;
  RF24 *result = 0 ;
  RF24 *_swig_go_result;
  
  arg1 = (uint16_t)_swig_go_0; 
  arg2 = (uint16_t)_swig_go_1; 
  
  result = (RF24 *)new RF24(arg1,arg2);
  *(RF24 **)&_swig_go_result = (RF24 *)result; 
  return _swig_go_result;
}


RF24 *_wrap_new_RF24__SWIG_1_RF24_25da4ded0286b3c1(short _swig_go_0, short _swig_go_1, intgo _swig_go_2) {
  uint16_t arg1 ;
  uint16_t arg2 ;
  uint32_t arg3 ;
  RF24 *result = 0 ;
  RF24 *_swig_go_result;
  
  arg1 = (uint16_t)_swig_go_0; 
  arg2 = (uint16_t)_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  
  result = (RF24 *)new RF24(arg1,arg2,arg3);
  *(RF24 **)&_swig_go_result = (RF24 *)result; 
  return _swig_go_result;
}


bool _wrap_RF24_begin_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool)(arg1)->begin();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_isChipConnected_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool)(arg1)->isChipConnected();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_startListening_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->startListening();
  
}


void _wrap_RF24_stopListening_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->stopListening();
  
}


bool _wrap_RF24_available__SWIG_0_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool)(arg1)->available();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_read_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, void *_swig_go_1, char _swig_go_2) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  
  (arg1)->read(arg2,arg3);
  
}


bool _wrap_RF24_write__SWIG_0_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, void *_swig_go_1, char _swig_go_2) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  
  result = (bool)(arg1)->write((void const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_openWritingPipe__SWIG_0_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char *_swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  
  (arg1)->openWritingPipe((uint8_t const *)arg2);
  
}


void _wrap_RF24_openReadingPipe__SWIG_0_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char _swig_go_1, char *_swig_go_2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  arg3 = *(uint8_t **)&_swig_go_2; 
  
  (arg1)->openReadingPipe(arg2,(uint8_t const *)arg3);
  
}


void _wrap_RF24_printDetails_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->printDetails();
  
}


bool _wrap_RF24_available__SWIG_1_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char *_swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  
  result = (bool)(arg1)->available(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_rxFifoFull_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool)(arg1)->rxFifoFull();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_powerDown_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->powerDown();
  
}


void _wrap_RF24_powerUp_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->powerUp();
  
}


bool _wrap_RF24_write__SWIG_1_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, void *_swig_go_1, char _swig_go_2, bool _swig_go_3) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  result = (bool)(arg1)->write((void const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_writeFast__SWIG_0_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, void *_swig_go_1, char _swig_go_2) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  
  result = (bool)(arg1)->writeFast((void const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_writeFast__SWIG_1_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, void *_swig_go_1, char _swig_go_2, bool _swig_go_3) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  result = (bool)(arg1)->writeFast((void const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_writeBlocking_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, void *_swig_go_1, char _swig_go_2, intgo _swig_go_3) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  uint32_t arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  arg4 = (uint32_t)_swig_go_3; 
  
  result = (bool)(arg1)->writeBlocking((void const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_txStandBy__SWIG_0_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool)(arg1)->txStandBy();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_txStandBy__SWIG_1_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)(arg1)->txStandBy(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_txStandBy__SWIG_2_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, intgo _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint32_t arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (bool)(arg1)->txStandBy(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_writeAckPayload_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char _swig_go_1, void *_swig_go_2, char _swig_go_3) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  void *arg3 = (void *) 0 ;
  uint8_t arg4 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  arg3 = *(void **)&_swig_go_2; 
  arg4 = (uint8_t)_swig_go_3; 
  
  (arg1)->writeAckPayload(arg2,(void const *)arg3,arg4);
  
}


bool _wrap_RF24_isAckPayloadAvailable_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool)(arg1)->isAckPayloadAvailable();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_whatHappened_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, bool *_swig_go_1, bool *_swig_go_2, bool *_swig_go_3) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool *arg4 = 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(bool **)&_swig_go_1; 
  arg3 = *(bool **)&_swig_go_2; 
  arg4 = *(bool **)&_swig_go_3; 
  
  (arg1)->whatHappened(*arg2,*arg3,*arg4);
  
}


void _wrap_RF24_startFastWrite__SWIG_0_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, void *_swig_go_1, char _swig_go_2, bool _swig_go_3, bool _swig_go_4) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  (arg1)->startFastWrite((void const *)arg2,arg3,arg4,arg5);
  
}


void _wrap_RF24_startFastWrite__SWIG_1_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, void *_swig_go_1, char _swig_go_2, bool _swig_go_3) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  (arg1)->startFastWrite((void const *)arg2,arg3,arg4);
  
}


void _wrap_RF24_startWrite_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, void *_swig_go_1, char _swig_go_2, bool _swig_go_3) {
  RF24 *arg1 = (RF24 *) 0 ;
  void *arg2 = (void *) 0 ;
  uint8_t arg3 ;
  bool arg4 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  (arg1)->startWrite((void const *)arg2,arg3,arg4);
  
}


void _wrap_RF24_reUseTX_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->reUseTX();
  
}


char _wrap_RF24_flush_tx_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (uint8_t)(arg1)->flush_tx();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_testCarrier_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool)(arg1)->testCarrier();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_testRPD_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool)(arg1)->testRPD();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_isValid_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool)(arg1)->isValid();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_closeReadingPipe_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  (arg1)->closeReadingPipe(arg2);
  
}


void _wrap_RF24_failureDetected_set_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, bool _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->failureDetected = arg2;
  
}


bool _wrap_RF24_failureDetected_get_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool) ((arg1)->failureDetected);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_setAddressWidth_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  (arg1)->setAddressWidth(arg2);
  
}


void _wrap_RF24_setRetries_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char _swig_go_1, char _swig_go_2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  
  (arg1)->setRetries(arg2,arg3);
  
}


void _wrap_RF24_setChannel_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  (arg1)->setChannel(arg2);
  
}


char _wrap_RF24_getChannel_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (uint8_t)(arg1)->getChannel();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_setPayloadSize_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  (arg1)->setPayloadSize(arg2);
  
}


char _wrap_RF24_getPayloadSize_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (uint8_t)(arg1)->getPayloadSize();
  _swig_go_result = result; 
  return _swig_go_result;
}


char _wrap_RF24_getDynamicPayloadSize_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (uint8_t)(arg1)->getDynamicPayloadSize();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_enableAckPayload_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->enableAckPayload();
  
}


void _wrap_RF24_enableDynamicPayloads_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->enableDynamicPayloads();
  
}


void _wrap_RF24_disableDynamicPayloads_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->disableDynamicPayloads();
  
}


void _wrap_RF24_enableDynamicAck_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->enableDynamicAck();
  
}


bool _wrap_RF24_isPVariant_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (bool)(arg1)->isPVariant();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_setAutoAck__SWIG_0_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, bool _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->setAutoAck(arg2);
  
}


void _wrap_RF24_setAutoAck__SWIG_1_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char _swig_go_1, bool _swig_go_2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  bool arg3 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  (arg1)->setAutoAck(arg2,arg3);
  
}


void _wrap_RF24_setPALevel_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  (arg1)->setPALevel(arg2);
  
}


char _wrap_RF24_getPALevel_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (uint8_t)(arg1)->getPALevel();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RF24_setDataRate_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, intgo _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  rf24_datarate_e arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (rf24_datarate_e)_swig_go_1; 
  
  result = (bool)(arg1)->setDataRate(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RF24_getDataRate_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  rf24_datarate_e result;
  intgo _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (rf24_datarate_e)(arg1)->getDataRate();
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_RF24_setCRCLength_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, intgo _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  rf24_crclength_e arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (rf24_crclength_e)_swig_go_1; 
  
  (arg1)->setCRCLength(arg2);
  
}


intgo _wrap_RF24_getCRCLength_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  rf24_crclength_e result;
  intgo _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (rf24_crclength_e)(arg1)->getCRCLength();
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_RF24_disableCRC_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  (arg1)->disableCRC();
  
}


void _wrap_RF24_maskIRQ_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, bool _swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  RF24 *arg1 = (RF24 *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  (arg1)->maskIRQ(arg2,arg3,arg4);
  
}


void _wrap_RF24_txDelay_set_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, intgo _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->txDelay = arg2;
  
}


intgo _wrap_RF24_txDelay_get_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->txDelay);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_csDelay_set_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, intgo _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->csDelay = arg2;
  
}


intgo _wrap_RF24_csDelay_get_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->csDelay);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RF24_openReadingPipe__SWIG_1_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, char _swig_go_1, long long _swig_go_2) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t arg2 ;
  uint64_t arg3 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  arg3 = (uint64_t)_swig_go_2; 
  
  (arg1)->openReadingPipe(arg2,arg3);
  
}


void _wrap_RF24_openWritingPipe__SWIG_1_RF24_25da4ded0286b3c1(RF24 *_swig_go_0, long long _swig_go_1) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  (arg1)->openWritingPipe(arg2);
  
}


char _wrap_RF24_flush_rx_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  result = (uint8_t)(arg1)->flush_rx();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_RF24_RF24_25da4ded0286b3c1(RF24 *_swig_go_0) {
  RF24 *arg1 = (RF24 *) 0 ;
  
  arg1 = *(RF24 **)&_swig_go_0; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

